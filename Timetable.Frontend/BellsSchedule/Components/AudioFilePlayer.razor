@using Timetable.Frontend.Shared.Services
@inject IJSRuntime JsRuntime
@inject ApiUrlService ApiUrlService

<audio @ref="_audioRef"
       @key="_fileId"
       @onended="() => PlaybackEnded.InvokeAsync()"
       src="@SoundFileUrl">
</audio>

@code
{
    [Parameter]
    public EventCallback PlaybackEnded { get; set; }

    private string SoundFileUrl
    {
        get
        {
            var soundApiUrl = Environment.GetEnvironmentVariable("SOUND_API_URL");

            if (soundApiUrl is not null)
            {
                return new Uri(new Uri(soundApiUrl), _fileId).ToString();
            }

            return ApiUrlService.Retrieve($"api/bells-schedule/sound-file/{_fileId}");
        }
    }

    private ElementReference _audioRef;
    private string _fileId = string.Empty;

    public async Task<bool> IsPlaying()
    {
        return await JsRuntime.InvokeAsync<bool>("audioPlayerInterop.isPlaying", _audioRef);
    }

    public async Task PlayAsync(string fileId)
    {
        _fileId = fileId;

        await InvokeAsync(StateHasChanged);
        await Task.Yield();
        await JsRuntime.InvokeVoidAsync("audioPlayerInterop.playAudio", _audioRef);
    }

    public async Task PauseAsync()
    {
        await JsRuntime.InvokeVoidAsync("audioPlayerInterop.pauseAudio", _audioRef);
    }

    public async Task StopAsync()
    {
        await JsRuntime.InvokeVoidAsync("audioPlayerInterop.stopAudio", _audioRef);
    }
}