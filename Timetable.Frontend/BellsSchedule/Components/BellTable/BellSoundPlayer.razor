@implements IDisposable
@inject BellTableEventService BellTableEventService

<AudioFilePlayer @ref="_audioFilePlayer"/>

@code
{
    [Parameter, EditorRequired]
    public BellTable BellTable { get; set; } = null!;

    [Parameter]
    public bool AreBellsActive { get; set; }

    private AudioFilePlayer _audioFilePlayer = null!;

    protected override void OnInitialized()
    {
        BellTableEventService.TimeStateUpdated += UpdateTimeStateAndPlaySoundIfNeeded;
    }

    private void UpdateTimeStateAndPlaySoundIfNeeded(TimeState timeState)
    {
        if (AreBellsActive is false || timeState.Row is null)
        {
            return;
        }

        switch (timeState.LessonState)
        {
            case LessonState.LessonIsGoing:
                PlaySound(timeState.Row.StartSoundId);
                break;
            case LessonState.AfterLessons:
                PlaySound(timeState.Row.EndSoundId);
                break;
            case LessonState.Break:
                PlaySound(timeState.PreviousRow?.EndSoundId);
                break;
        }
    }

    private void PlaySound(string? soundId)
    {
        if (string.IsNullOrEmpty(soundId))
        {
            return;
        }

        InvokeAsync(() => _audioFilePlayer.PlayAsync(soundId));
    }

    public void Dispose()
    {
        BellTableEventService.TimeStateUpdated -= UpdateTimeStateAndPlaySoundIfNeeded;
    }
}