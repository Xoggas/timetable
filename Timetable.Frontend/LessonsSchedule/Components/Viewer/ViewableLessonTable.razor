@using Microsoft.AspNetCore.SignalR.Client
@using Timetable.Frontend.BellsSchedule.Helpers
@using Timetable.Frontend.BellsSchedule.Models
@using Timetable.Frontend.BellsSchedule.Services
@using Timetable.Frontend.LessonsSchedule.Policies
@using Timetable.Frontend.Shared.Services
@inject ApiUrlService ApiUrlService
@inject LessonTableService LessonTableService
@inject BellTableService BellTableService
@implements IAsyncDisposable

<table class="table">
    @foreach (var (row, rowIndex) in _table.Select((x, i) => (x, i)))
    {
        <tr class="row">
            @if (rowIndex == 0)
            {
                <!-- filling cells -->
                <td></td>
                <td></td>

                @foreach (var title in row)
                {
                    <td class="header-cell">
                        @title
                    </td>
                }
            }
            else
            {
                var bellTableRow = _bellTable.Rows.ElementAtOrDefault(rowIndex - 1);
                var isRowActive = _activeRow is not null && _lessonState is LessonState.LessonIsGoing or
                    LessonState.BeforeLessons or
                    LessonState.Break && _activeRow == rowIndex - 1;

                <td class="cell" index active="@isRowActive">
                    @rowIndex
                </td>

                @if (bellTableRow is null)
                {
                    <td class="cell">
                        ---
                    </td>
                }
                else
                {
                    <td class="cell" active="@isRowActive">
                        @bellTableRow
                    </td>
                }

                @foreach (var lesson in row)
                {
                    <td class="cell" active="@isRowActive">
                        @lesson
                    </td>
                }
            }
        </tr>
    }
</table>

<StatusBar BellTable="_bellTable"/>

<ConnectionIssuesOverlay IsVisible="_isReconnectionOverlayVisible"/>

@code
{
    [Parameter]
    public CustomDayOfWeek DayOfWeek { get; set; }

    private CustomTimer _timer = null!;
    private HubConnection? _lessonsScheduleHubConnection;
    private HubConnection? _bellsScheduleHubConnection;
    private bool _isReconnectionOverlayVisible;
    private List<List<string>> _table = [];

    private BellTable _bellTable = new();
    private int? _activeRow;
    private LessonState _lessonState;

    protected override void OnInitialized()
    {
        _timer = new CustomTimer(TimeSpan.FromSeconds(1), UpdateStateAndRow);
    }

    protected override async Task OnInitializedAsync()
    {
        await CreateHubForLessonTable();
        await CreateHubForBellTable();
    }

    protected override async Task OnParametersSetAsync()
    {
        await UpdateTables();
    }

    private async Task CreateHubForLessonTable()
    {
        _lessonsScheduleHubConnection = new HubConnectionBuilder()
            .WithUrl(ApiUrlService.Retrieve("lessons-schedule"))
            .WithAutomaticReconnect(new InfiniteRetryPolicy())
            .Build();

        _lessonsScheduleHubConnection.Reconnecting += async _ => await OnReconnecting();
        _lessonsScheduleHubConnection.Reconnected += async _ => await OnReconnected();
        _lessonsScheduleHubConnection.On<LessonTable>("Update", table =>
        {
            _table = table.Lessons;

            InvokeAsync(StateHasChanged);
        });

        await _lessonsScheduleHubConnection.StartAsync();
    }

    private async Task CreateHubForBellTable()
    {
        _bellsScheduleHubConnection = new HubConnectionBuilder()
            .WithUrl(ApiUrlService.Retrieve("bells-schedule"))
            .WithAutomaticReconnect(new InfiniteRetryPolicy())
            .Build();

        _bellsScheduleHubConnection.On<BellTable>("Update", table =>
        {
            _bellTable = table;

            InvokeAsync(StateHasChanged);
        });

        await _bellsScheduleHubConnection.StartAsync();
    }

    private async Task UpdateTables()
    {
        _table = (await LessonTableService.GetByDayOfWeek(DayOfWeek)).Lessons;
        _bellTable = await BellTableService.GetBellTableAsync();

        await InvokeAsync(StateHasChanged);
    }

    private async Task OnReconnecting()
    {
        _isReconnectionOverlayVisible = true;

        await InvokeAsync(StateHasChanged);
    }

    private async Task OnReconnected()
    {
        _isReconnectionOverlayVisible = false;

        await UpdateTables();
    }

    private void UpdateStateAndRow()
    {
        var row = BellTimeResolver.ResolveRowAndState(_bellTable.Rows, DateTime.Now.GetTotalMinutes(), out _lessonState);

        if (row is null)
        {
            _activeRow = null;
        }
        else if (_lessonState is LessonState.Break)
        {
            _activeRow = _bellTable.Rows.IndexOf(row) + 1;
        }
        else
        {
            _activeRow = _bellTable.Rows.IndexOf(row);
        }

        InvokeAsync(StateHasChanged);
    }

    public async ValueTask DisposeAsync()
    {
        if (_lessonsScheduleHubConnection != null)
        {
            await _lessonsScheduleHubConnection.DisposeAsync();
        }

        if (_bellsScheduleHubConnection is not null)
        {
            await _bellsScheduleHubConnection.DisposeAsync();
        }

        _timer.Dispose();
    }
}