@using Microsoft.AspNetCore.SignalR.Client
@using Timetable.Frontend.BellsSchedule.Models
@using Timetable.Frontend.BellsSchedule.Services
@using Timetable.Frontend.LessonsSchedule.Policies
@using Timetable.Frontend.Shared.Services
@implements IDisposable
@implements IAsyncDisposable
@inject ApiUrlService ApiUrlService
@inject LessonTableService LessonTableService
@inject BellTableService BellTableService
@inject BellTableEventService BellTableEventService

<table class="table">
    @foreach (var (row, rowIndex) in _lessonTable.Lessons.Select((x, i) => (x, i)))
    {
        <tr class="row">
            @if (rowIndex == 0)
            {
                <!-- filling cells -->
                <td></td>
                <td></td>

                @foreach (var title in row)
                {
                    <td class="header-cell">
                        @title
                    </td>
                }
            }
            else
            {
                var isRowActive = rowIndex == _timeState.RowIndex;

                <td class="cell" index active="@isRowActive">
                    @rowIndex
                </td>

                @if (_timeState.Row?.StartTime is null || _timeState.Row?.EndTime is null)
                {
                    <td class="cell">
                        ---
                    </td>
                }
                else
                {
                    <td class="cell" active="@isRowActive">
                        @_timeState.Row
                    </td>
                }

                @foreach (var lesson in row)
                {
                    <td class="cell" active="@isRowActive">
                        @lesson
                    </td>
                }
            }
        </tr>
    }
</table>

<StatusBar IsBellTableFilled="_bellTable.Rows.Count > 0"/>

<ConnectionIssuesOverlay IsVisible="_isReconnectionOverlayVisible"/>

@code
{
    [Parameter]
    public CustomDayOfWeek DayOfWeek { get; set; }

    private HubConnection? _lessonsScheduleHubConnection;
    private bool _isReconnectionOverlayVisible;

    private LessonTable _lessonTable = new();
    private BellTable _bellTable = new();
    private TimeState _timeState = new();

    protected override void OnInitialized()
    {
        BellTableEventService.BellTableUpdated += OnBellTableUpdate;
        BellTableEventService.TimeStateUpdated += OnTimeStateUpdate;
    }

    protected override async Task OnInitializedAsync()
    {
        await CreateHubForLessonTable();
    }

    protected override async Task OnParametersSetAsync()
    {
        await UpdateTablesAndState();
    }

    private async Task CreateHubForLessonTable()
    {
        _lessonsScheduleHubConnection = new HubConnectionBuilder()
            .WithUrl(ApiUrlService.Retrieve("lessons-schedule"))
            .WithAutomaticReconnect(new InfiniteRetryPolicy())
            .Build();

        _lessonsScheduleHubConnection.Reconnecting += async _ => await OnReconnecting();
        _lessonsScheduleHubConnection.Reconnected += async _ => await OnReconnected();
        _lessonsScheduleHubConnection.On<LessonTable>("Update", lessonTable =>
        {
            _lessonTable = lessonTable;
            InvokeAsync(StateHasChanged);
        });

        await _lessonsScheduleHubConnection.StartAsync();
    }

    private void OnBellTableUpdate(BellTable bellTable)
    {
        _bellTable = bellTable;
        InvokeAsync(StateHasChanged);
    }

    private void OnTimeStateUpdate(TimeState timeState)
    {
        _timeState = timeState;
        InvokeAsync(StateHasChanged);
    }

    private async Task UpdateTablesAndState()
    {
        _lessonTable = await LessonTableService.GetByDayOfWeekAsync(DayOfWeek);
        _bellTable = await BellTableService.GetBellTableAsync();
        _timeState = await BellTableService.GetTimeStateAsync();
        await InvokeAsync(StateHasChanged);
    }

    private async Task OnReconnecting()
    {
        _isReconnectionOverlayVisible = true;
        await InvokeAsync(StateHasChanged);
    }

    private async Task OnReconnected()
    {
        _isReconnectionOverlayVisible = false;
        await UpdateTablesAndState();
    }

    public void Dispose()
    {
        BellTableEventService.BellTableUpdated -= OnBellTableUpdate;
        BellTableEventService.TimeStateUpdated -= OnTimeStateUpdate;
    }

    public async ValueTask DisposeAsync()
    {
        if (_lessonsScheduleHubConnection is not null)
        {
            await _lessonsScheduleHubConnection.DisposeAsync();
        }
    }
}