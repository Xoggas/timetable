@using Timetable.Frontend.BellsSchedule.Models
@using Timetable.Frontend.BellsSchedule.Services
@implements IDisposable
@inject BellTableEventService BellTableEventService
@inject BellTableService BellTableService

<div class="container">
    @if (IsBellTableFilled is false)
    {
        <p>Таблица звонков не заполнена!</p>
    }
    else
    {
        @switch (_lessonState)
        {
            case LessonState.BeforeLessons:
                <p>Первый урок начнётся в @_lessonStartTime</p>
                break;
            case LessonState.LessonIsGoing:
                <p>Урок идёт</p>
                break;
            case LessonState.Break:
                <p>Следующий урок начнётся в @_lessonEndTime</p>
                break;
            case LessonState.AfterLessons:
                <p>Уроки закончились</p>
                break;
        }
    }
</div>

@code
{
    [Parameter, EditorRequired]
    public bool IsBellTableFilled { get; set; }

    private LessonState _lessonState;
    private TimeModel? _lessonStartTime;
    private TimeModel? _lessonEndTime;

    protected override void OnInitialized()
    {
        BellTableEventService.TimeStateUpdated += UpdateStateAndActiveRow;
    }

    protected override async Task OnInitializedAsync()
    {
        var timeState = await BellTableService.GetTimeStateAsync();
        UpdateStateAndActiveRow(timeState);
    }

    private void UpdateStateAndActiveRow(TimeState timeState)
    {
        _lessonState = timeState.LessonState;
        _lessonStartTime = timeState.Row?.StartTime;
        _lessonEndTime = timeState.Row?.EndTime;
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        BellTableEventService.TimeStateUpdated -= UpdateStateAndActiveRow;
    }
}