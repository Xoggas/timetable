@inject LessonListService LessonListService

<ScrollView IsEmpty="_lessons.Count == 0" EmptyListText="Список уроков пуст!">
    <ScrollViewContent>
        @foreach (var (lesson, index) in _lessons.Select((x, i) => (x, i + 1)))
        {
            <div class="lesson">
                <div class="lesson__index">
                    @index
                </div>
                <input maxlength="20"
                       class="lesson__name-input"
                       type="text"
                       @bind="@lesson.Name"
                       placeholder="Название урока"/>
                <Button class="lesson__button" @onclick="() => DeleteLesson(lesson)">
                    <Icon>
                        <DeleteIcon/>
                    </Icon>
                </Button>
            </div>
        }
    </ScrollViewContent>
    <FooterContent>
        <Button class="lesson__button" @onclick="AddLesson">
            <Icon>
                <AddIcon/>
            </Icon>
        </Button>
    </FooterContent>
</ScrollView>

<ConfirmationModal @ref="_lessonDeletionModal">
    <Content>
        Вы хотите удалить урок?
    </Content>
</ConfirmationModal>

@code
{
    private ConfirmationModal _lessonDeletionModal = null!;

    private List<Lesson> _lessons = [];

    public async Task Save()
    {
        await Task.WhenAll(_lessons.Select(UpdateLesson));
    }

    protected override async Task OnInitializedAsync()
    {
        _lessons = await LessonListService.GetAllLessons();
    }

    private async Task AddLesson()
    {
        var lesson = await LessonListService.CreateLesson();

        _lessons.Add(lesson);
    }

    private void DeleteLesson(Lesson lesson)
    {
        _lessonDeletionModal.Show(async () =>
        {
            await LessonListService.DeleteLesson(lesson);

            _lessons.Remove(lesson);

            StateHasChanged();
        });
    }

    private async Task UpdateLesson(Lesson lesson)
    {
        await LessonListService.UpdateLesson(lesson);
    }
}