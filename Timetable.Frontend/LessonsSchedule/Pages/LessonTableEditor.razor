@page "/lesson-table/editor"

@rendermode InteractiveServer

<PageTitle>Редактор расписания</PageTitle>

<LessonsSheduleHeader>
    <ActionItems>
        <Button class="action-item"
                @onclick="ToggleEditingMode"
                IsTransparent="@_isTableBeingEdited"
                LabelAlwaysVisible="false">
            <Icon>
                <EditIcon/>
            </Icon>
            <Label>
                Редакт. таблицу
            </Label>
        </Button>
        <Button class="action-item" LabelAlwaysVisible="false" @onclick="Restore">
            <Icon>
                <RestoreIcon/>
            </Icon>
            <Label>
                Восст. копию
            </Label>
        </Button>
        <Button class="action-item" LabelAlwaysVisible="false" @onclick="Backup">
            <Icon>
                <BackupIcon/>
            </Icon>
            <Label>
                Создать копию
            </Label>
        </Button>
        <Button class="action-item" @onclick="Save" LabelAlwaysVisible="false">
            <Icon>
                <SaveIcon/>
            </Icon>
            <Label>
                Сохранить
            </Label>
        </Button>
    </ActionItems>
</LessonsSheduleHeader>

<EditableLessonTable IsBeingEdited="_isTableBeingEdited" DayOfWeek="_customDayOfWeek" @ref="_lessonTable"/>

<DayOfWeekSelector @bind-DayOfWeek="_customDayOfWeek"/>

@code
{
    private CustomDayOfWeek _customDayOfWeek = DateTime.Today.GetNativeDayOfWeek();
    private EditableLessonTable _lessonTable = null!;
    private bool _isTableBeingEdited;

    private async Task Save()
    {
        await _lessonTable.Save();
    }

    private void Backup()
    {
        _lessonTable.Backup();
    }

    private void Restore()
    {
        _lessonTable.Restore();
    }

    private void ToggleEditingMode()
    {
        _isTableBeingEdited = !_isTableBeingEdited;
    }
}